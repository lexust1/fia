import numpy as np
import pandas as pd
import pytest


from fia.main import TvDataCollector, Frame


@pytest.fixture
def raw_data():
    """Returns the raw data."""
    return '~m~362~m~{"session_id":"<0.6511.2128>_wdc2-charts-6-webchart-1@wdc2-compute-6_x","timestamp":1670907792,"timestampMs":1670907792101,"release":"registry.xtools.tv/tvbs_release/webchart:release_205-117","studies_metadata_hash":"7241c455b37651db90307d1f707f6869e2f9af78","protocol":"json","javastudies":"javastudies-3.61_2811","auth_scheme_vsn":2,"via":"23.105.168.214:443"}~m~95~m~{"m":"series_loading","p":["cs_IftZYJv2wIpg","sds_1","s1"],"t":1670907793,"t_ms":1670907793731}~m~577~m~{"m":"qsd","p":["qs_LU8wn5NA5adt",{"n":"NASDAQ:AAPL","s":"ok","v":{"volume":70462654,"update_mode":"streaming","typespecs":["common"],"type":"stock","short_name":"AAPL","pro_name":"NASDAQ:AAPL","pricescale":100,"original_name":"BATS:AAPL","minmove2":0,"minmov":1,"lp_time":1670893197,"lp":144.49,"logoid":"apple","local_description":"Apple Inc.","listed_exchange":"NASDAQ","language":"en","is_tradable":true,"fractional":false,"exchange":"Cboe BZX","description":"Apple Inc.","current_session":"out_of_session","currency_id":"USD","currency_code":"USD","chp":1.64,"ch":2.33}}]}~m~61~m~{"m":"quote_completed","p":["qs_LU8wn5NA5adt","NASDAQ:AAPL"]}~m~3564~m~{"m":"symbol_resolved","p":["cs_IftZYJv2wIpg","sds_sym_1",{"currency_code":"USD","session_holidays":"20000117,20000221,20000421,20000529,20000704,20000904,20001123,20001225,20010101,20010115,20010219,20010413,20010528,20010704,20010903,20011122,20011225,20020101,20020121,20020218,20020329,20020527,20020704,20020902,20021128,20021225,20030101,20030120,20030217,20030418,20030526,20030704,20030901,20031127,20031225,20040101,20040119,20040216,20040409,20040531,20040611,20040705,20040906,20041125,20041224,20050117,20050221,20050325,20050530,20050704,20050905,20051124,20051226,20060102,20060116,20060220,20060414,20060529,20060704,20060904,20061123,20061225,20070101,20070102,20070115,20070219,20070406,20070528,20070704,20070903,20071122,20071225,20080101,20080121,20080218,20080321,20080526,20080704,20080901,20081127,20081225,20090101,20090119,20090216,20090410,20090525,20090703,20090907,20091126,20091225,20100101,20100118,20100215,20100402,20100531,20100705,20100906,20101125,20101224,20110117,20110221,20110422,20110530,20110704,20110905,20111124,20111226,20120102,20120116,20120220,20120406,20120528,20120704,20120903,20121122,20121225,20130101,20130121,20130218,20130329,20130527,20130704,20130902,20131128,20131225,20140101,20140120,20140217,20140418,20140526,20140704,20140901,20141127,20141225,20150101,20150119,20150216,20150403,20150525,20150703,20150907,20151126,20151225,20160101,20160118,20160215,20160325,20160530,20160704,20160905,20161124,20161226,20170102,20170116,20170220,20170414,20170529,20170704,20170904,20171123,20171225,20180101,20180115,20180219,20180330,20180528,20180704,20180903,20181122,20181225,20190101,20190121,20190218,20190419,20190527,20190704,20190902,20191128,20191225,20200101,20200120,20200217,20200410,20200525,20200703,20200907,20201126,20201225,20210101,20210118,20210215,20210402,20210531,20210705,20210906,20211125,20211224,20220117,20220221,20220415,20220530,20220620,20220704,20220905,20221124,20221226,20230102,20230116,20230220,20230407,20230529,20230619,20230704,20230904,20231123,20231225","subsession_id":"regular","provider_id":"ice","currency_id":"USD","country":"US","pro_perm":"nasdaq","allowed_adjustment":"any","short_description":"Apple Inc.","variable_tick_size":"0.0001 1 0.01","sedol":"2046251","nsin":"037833100","isin":"US0378331005","local_code":"AAPL","language":"en","local_description":"Apple Inc.","name":"AAPL","full_name":"BATS:AAPL","pro_name":"NASDAQ:AAPL","base_name":["NASDAQ:AAPL"],"description":"Apple Inc.","exchange":"Cboe BZX","pricescale":100,"pointvalue":1.0,"minmov":1,"session":"0930-1600","session_display":"0930-1600","subsessions":[{"description":"Regular Trading Hours","id":"regular","private":false,"session":"0930-1600","session-display":"0930-1600"},{"description":"Extended Trading Hours","id":"extended","private":false,"session":"0400-2000","session-display":"0400-2000"},{"description":"Premarket","id":"premarket","private":true,"session":"0400-0930","session-display":"0400-0930"},{"description":"Postmarket","id":"postmarket","private":true,"session":"1600-2000","session-display":"1600-2000"}],"type":"stock","typespecs":["common"],"resolutions":[],"has_intraday":true,"fractional":false,"listed_exchange":"NASDAQ","legs":["BATS:AAPL"],"is_tradable":true,"minmove2":0,"timezone":"America/New_York","aliases":["BATS_MIX:AAPL"],"alternatives":["BATS_DLY:AAPL"],"is_replayable":true,"has_adjustment":true,"has_extended_hours":true,"bar_source":"trade","bar_transform":"none","bar_fillgaps":false,"visible_plots_set":"ohlcv"}],"t":1670907793,"t_ms":1670907793731}~m~5226~m~{"m":"timescale_update","p":["cs_IftZYJv2wIpg",{"sds_1":{"node":"wdc2-20-series-charts-free-1-runner-2","s":[{"i":0,"v":[1664803800.0,138.21,143.07,137.685,142.45,114311663.0]},{"i":1,"v":[1664890200.0,145.03,146.22,144.26,146.1,87830064.0]},{"i":2,"v":[1664976600.0,144.075,147.38,143.01,146.4,79470968.0]},{"i":3,"v":[1665063000.0,145.81,147.54,145.22,145.43,68402169.0]},{"i":4,"v":[1665149400.0,142.54,143.1,139.445,140.09,85925559.0]},{"i":5,"v":[1665408600.0,140.42,141.89,138.5729,140.42,74899002.0]},{"i":6,"v":[1665495000.0,139.9,141.35,138.22,138.98,77033672.0]},{"i":7,"v":[1665581400.0,139.13,140.36,138.16,138.34,70433744.0]},{"i":8,"v":[1665667800.0,134.99,143.59,134.37,142.99,113223975.0]},{"i":9,"v":[1665754200.0,144.31,144.52,138.19,138.38,88597969.0]},{"i":10,"v":[1666013400.0,141.065,142.9,140.27,142.41,85250939.0]},{"i":11,"v":[1666099800.0,145.49,146.7,140.61,143.75,99136610.0]},{"i":12,"v":[1666186200.0,141.69,144.9492,141.5,143.86,61758340.0]},{"i":13,"v":[1666272600.0,143.02,145.89,142.65,143.39,64521989.0]},{"i":14,"v":[1666359000.0,142.87,147.8479,142.649,147.27,86548609.0]},{"i":15,"v":[1666618200.0,147.185,150.23,146.0,149.45,75981918.0]},{"i":16,"v":[1666704600.0,150.09,152.49,149.36,152.34,74732290.0]},{"i":17,"v":[1666791000.0,150.96,151.99,148.04,149.35,88436172.0]},{"i":18,"v":[1666877400.0,148.07,149.046,144.13,144.8,109180150.0]},{"i":19,"v":[1666963800.0,148.2,157.5,147.82,155.74,164762371.0]},{"i":20,"v":[1667223000.0,153.155,154.24,151.92,153.34,97943171.0]},{"i":21,"v":[1667309400.0,155.08,155.45,149.13,150.65,80379345.0]},{"i":22,"v":[1667395800.0,148.945,152.17,145.0,145.03,93604623.0]},{"i":23,"v":[1667482200.0,142.06,142.8,138.75,138.88,97918516.0]},{"i":24,"v":[1667568600.0,142.09,142.67,134.38,138.38,140814796.0]},{"i":25,"v":[1667831400.0,137.11,139.145,135.671,138.92,83374628.0]},{"i":26,"v":[1667917800.0,140.41,141.43,137.49,139.5,89908477.0]},{"i":27,"v":[1668004200.0,138.5,138.55,134.5933,134.87,74917794.0]},{"i":28,"v":[1668090600.0,141.24,146.87,139.5,146.87,118854028.0]},{"i":29,"v":[1668177000.0,145.82,150.01,144.37,149.7,93979665.0]},{"i":30,"v":[1668436200.0,148.97,150.28,147.43,148.28,73374114.0]},{"i":31,"v":[1668522600.0,152.215,153.59,148.5613,150.04,89868332.0]},{"i":32,"v":[1668609000.0,149.13,149.87,147.29,148.79,64218266.0]},{"i":33,"v":[1668695400.0,146.43,151.48,146.15,150.72,80389400.0]},{"i":34,"v":[1668781800.0,152.305,152.7,149.97,151.29,74829573.0]},{"i":35,"v":[1669041000.0,150.16,150.37,147.715,148.01,58724070.0]},{"i":36,"v":[1669127400.0,148.13,150.42,146.925,150.18,51804132.0]},{"i":37,"v":[1669213800.0,149.45,151.83,149.34,151.07,58301395.0]},{"i":38,"v":[1669386600.0,148.305,148.88,147.12,148.11,35195860.0]},{"i":39,"v":[1669645800.0,145.14,146.64,143.38,144.22,69346522.0]},{"i":40,"v":[1669732200.0,144.29,144.81,140.355,141.17,83763803.0]},{"i":41,"v":[1669818600.0,141.395,148.72,140.55,148.03,111380880.0]},{"i":42,"v":[1669905000.0,148.21,149.13,146.61,148.31,71250416.0]},{"i":43,"v":[1669991400.0,145.96,148.0,145.65,147.81,65447446.0]},{"i":44,"v":[1670250600.0,147.77,150.9199,145.77,146.63,68826442.0]},{"i":45,"v":[1670337000.0,147.075,147.3,141.92,142.91,64727186.0]},{"i":46,"v":[1670423400.0,142.19,143.37,140.0,140.94,69721094.0]},{"i":47,"v":[1670509800.0,142.36,143.52,141.1,142.65,62128338.0]},{"i":48,"v":[1670596200.0,142.34,145.57,140.9,142.16,76097011.0]},{"i":49,"v":[1670855400.0,142.7,144.5,141.06,144.49,70462654.0]}],"ns":{"d":"","indexes":[]},"t":"s1","lbs":{"bar_close_time":1670878799}}},{"index":0,"zoffset":0,"changes":[1664803800.0,1664890200.0,1664976600.0,1665063000.0,1665149400.0,1665408600.0,1665495000.0,1665581400.0,1665667800.0,1665754200.0,1666013400.0,1666099800.0,1666186200.0,1666272600.0,1666359000.0,1666618200.0,1666704600.0,1666791000.0,1666877400.0,1666963800.0,1667223000.0,1667309400.0,1667395800.0,1667482200.0,1667568600.0,1667831400.0,1667917800.0,1668004200.0,1668090600.0,1668177000.0,1668436200.0,1668522600.0,1668609000.0,1668695400.0,1668781800.0,1669041000.0,1669127400.0,1669213800.0,1669386600.0,1669645800.0,1669732200.0,1669818600.0,1669905000.0,1669991400.0,1670250600.0,1670337000.0,1670423400.0,1670509800.0,1670596200.0,1670855400.0],"marks":[[10,1664755200,0],[40,1664841600,1],[40,1664928000,2],[40,1665014400,3],[40,1665100800,4],[50,1665360000,5],[40,1665446400,6],[40,1665532800,7],[40,1665619200,8],[40,1665705600,9],[50,1665964800,10],[40,1666051200,11],[40,1666137600,12],[40,1666224000,13],[40,1666310400,14],[50,1666569600,15],[40,1666656000,16],[40,1666742400,17],[40,1666828800,18],[40,1666915200,19],[50,1667174400,20],[60,1667260800,21],[40,1667347200,22],[40,1667433600,23],[40,1667520000,24],[50,1667779200,25],[40,1667865600,26],[40,1667952000,27],[40,1668038400,28],[40,1668124800,29],[50,1668384000,30],[40,1668470400,31],[40,1668556800,32],[40,1668643200,33],[40,1668729600,34],[50,1668988800,35],[40,1669075200,36],[40,1669161600,37],[40,1669334400,38],[50,1669593600,39],[40,1669680000,40],[40,1669766400,41],[60,1669852800,42],[40,1669939200,43],[50,1670198400,44],[40,1670284800,45],[40,1670371200,46],[40,1670457600,47],[40,1670544000,48],[50,1670803200,49]],"index_diff":[]}],"t":1670907793,"t_ms":1670907793731}~m~109~m~{"m":"series_completed","p":["cs_IftZYJv2wIpg","sds_1","streaming","s1"],"t":1670907793,"t_ms":1670907793731}~m~4~m~~h~1~m~4~m~~h~2~m~4~m~~h~3~m~4~m~~h~4~m~4~m~~h~5~m~4~m~~h~6~m~4~m~~h~7'


@pytest.fixture(scope="module")
def tvdc():
    """Creates the TvDataCollector."""
    tvdc = TvDataCollector(username="GoodName",
                           password="StrongPSW123#",
                           exchange="NASDAQ",
                           ticker_sym="AAPL",
                           currency="USD",
                           frame=Frame.DAY,
                           bars=50)
    return tvdc


def test_returned_data_type(tvdc, raw_data):
    """Tests the type of the returned data."""
    df = tvdc.get_pandas_data(raw_data=raw_data)
    assert isinstance(df, pd.DataFrame)


def test_returned_data_column_names(tvdc, raw_data):
    """Tests the columns names in the returned Dataframe data."""
    df_cols = tvdc.get_pandas_data(raw_data=raw_data).columns.tolist()
    assert df_cols == ["DateTime", "Open", "High", "Low", "Close", "Volume"]


def test_returned_data_column_types(tvdc, raw_data):
    """Tests the type of every column in the returned Dataframe data."""
    df_types = tvdc.get_pandas_data(raw_data=raw_data).dtypes.tolist()

    actual = [type(df_types[0]),
              df_types[1],
              df_types[2],
              df_types[3],
              df_types[4],
              df_types[5]]

    expected = [pd.DatetimeTZDtype,
                np.dtype('float64'),
                np.dtype('float64'),
                np.dtype('float64'),
                np.dtype('float64'),
                np.dtype('float64')]
    assert actual == expected


def test_returned_data_num_of_rows(tvdc, raw_data):
    """Tests the number of rows in the returned Dataframe data."""
    df_rows = tvdc.get_pandas_data(raw_data=raw_data).shape[0]
    assert df_rows == tvdc.bars


def test_default_time_zone(tvdc, raw_data):
    """Tests the default timezone."""
    df = tvdc.get_pandas_data(raw_data)
    assert df["DateTime"].dt.tz.zone == "UTC"


@pytest.mark.parametrize(
    "timezone",
    [
        "America/Chicago",
        "Asia/Shanghai",
        "Asia/Tel_Aviv",
        "Asia/Jakarta",
        "Asia/Yekaterinburg",
        "Europe/Belgrade",
        "Africa/Casablanca"
    ]
)
def test_custom_time_zone(tvdc, timezone, raw_data):
    """Tests the custom timezone."""
    df = tvdc.get_pandas_data(raw_data=raw_data, tz=timezone)
    assert df["DateTime"].dt.tz.zone == timezone


def test_time_conversion(tvdc, raw_data):
    """Tests the time conversion."""
    df = tvdc.get_pandas_data(raw_data)
    # {"i":1,"v":[1664890200.0,145.03,146.22,144.26,146.1,87830064.0]}
    unix_time = df.loc[1]["DateTime"].timestamp()
    assert unix_time == 1664890200.0
