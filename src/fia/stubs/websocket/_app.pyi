from ._exceptions import *
from typing import Any, Optional

def setReconnect(reconnectInterval): ...

class DispatcherBase:
    app: Any = ...
    ping_timeout: Any = ...
    def __init__(self, app: Any, ping_timeout: Any) -> None: ...
    def timeout(self, seconds: Any, callback: Any) -> None: ...
    def reconnect(self, seconds: Any, reconnector: Any) -> None: ...

class Dispatcher(DispatcherBase):
    def read(self, sock: Any, read_callback: Any, check_callback: Any) -> None: ...

class SSLDispatcher(DispatcherBase):
    def read(self, sock: Any, read_callback: Any, check_callback: Any) -> None: ...
    def select(self): ...

class WrappedDispatcher:
    app: Any = ...
    ping_timeout: Any = ...
    dispatcher: Any = ...
    def __init__(self, app: Any, ping_timeout: Any, dispatcher: Any) -> None: ...
    def read(self, sock: Any, read_callback: Any, check_callback: Any) -> None: ...
    def timeout(self, seconds: Any, callback: Any) -> None: ...
    def reconnect(self, seconds: Any, reconnector: Any) -> None: ...

class WebSocketApp:
    url: Any = ...
    header: Any = ...
    cookie: Any = ...
    on_open: Any = ...
    on_message: Any = ...
    on_data: Any = ...
    on_error: Any = ...
    on_close: Any = ...
    on_ping: Any = ...
    on_pong: Any = ...
    on_cont_message: Any = ...
    keep_running: bool = ...
    get_mask_key: Any = ...
    sock: Any = ...
    last_ping_tm: int = ...
    last_pong_tm: int = ...
    subprotocols: Any = ...
    prepared_socket: Any = ...
    has_errored: bool = ...
    def __init__(self, url: Any, header: Optional[Any] = ..., on_open: Optional[Any] = ..., on_message: Optional[Any] = ..., on_error: Optional[Any] = ..., on_close: Optional[Any] = ..., on_ping: Optional[Any] = ..., on_pong: Optional[Any] = ..., on_cont_message: Optional[Any] = ..., keep_running: bool = ..., get_mask_key: Optional[Any] = ..., cookie: Optional[Any] = ..., subprotocols: Optional[Any] = ..., on_data: Optional[Any] = ..., socket: Optional[Any] = ...) -> None: ...
    def send(self, data: Any, opcode: Any = ...) -> None: ...
    def close(self, **kwargs: Any) -> None: ...
    def run_forever(self, sockopt: Optional[Any] = ..., sslopt: Optional[Any] = ..., ping_interval: int = ..., ping_timeout: Optional[Any] = ..., ping_payload: str = ..., http_proxy_host: Optional[Any] = ..., http_proxy_port: Optional[Any] = ..., http_no_proxy: Optional[Any] = ..., http_proxy_auth: Optional[Any] = ..., http_proxy_timeout: Optional[Any] = ..., skip_utf8_validation: bool = ..., host: Optional[Any] = ..., origin: Optional[Any] = ..., dispatcher: Optional[Any] = ..., suppress_origin: bool = ..., proxy_type: Optional[Any] = ..., reconnect: Optional[Any] = ...): ...
    def create_dispatcher(self, ping_timeout: Any, dispatcher: Optional[Any] = ..., is_ssl: bool = ...): ...
